{
  "title": {
    "text": "Try Dragging these Points",
    "left": "center"
  },
  "tooltip": {
    "triggerOn": "none",
    "formatter": "function (params) { return ( 'X: ' + params.data[0].toFixed(2) + '<br>Y: ' + params.data[1].toFixed(2) ); }"
  },
  "grid": {
    "top": "8%",
    "bottom": "12%"
  },
  "xAxis": {
    "min": -100,
    "max": 70,
    "type": "value",
    "axisLine": {
      "onZero": false
    }
  },
  "yAxis": {
    "min": -30,
    "max": 60,
    "type": "value",
    "axisLine": {
      "onZero": false
    }
  },
  "dataZoom": [
    {
      "type": "slider",
      "xAxisIndex": 0,
      "filterMode": "none"
    },
    {
      "type": "slider",
      "yAxisIndex": 0,
      "filterMode": "none"
    },
    {
      "type": "inside",
      "xAxisIndex": 0,
      "filterMode": "none"
    },
    {
      "type": "inside",
      "yAxisIndex": 0,
      "filterMode": "none"
    }
  ],
  "series": [
    {
      "id": "a",
      "type": "line",
      "smooth": true,
      "symbolSize": 20,
      "data": [
        [
          40,
          -10
        ],
        [
          -30,
          -5
        ],
        [
          -76.5,
          20
        ],
        [
          -63.5,
          40
        ],
        [
          -22.1,
          50
        ]
      ]
    }
  ],
  "actions": [
    {
      "name": "Randomize",
      "handler": "(chart) => { const options = chart.getOption(); options.series.forEach((series, idx) => { switch (idx) { case 0: const xData = Utils.numbers({ count: series.data.length, decimals: 0, min: -60, max: 20, }); const yData = Utils.numbers({ count: series.data.length, decimals: 0, min: 0, max: 40, }); series.data = sharedVar.data = xData.map(function(x, idx) { return [x, yData[idx]]; }); break; } }); chart.setOption(options); }"
    },
    {
      "name": "Reset",
      "handler": "(chart) => { const options = chart.getOption(); options.series.forEach((series, idx) => { switch (idx) { case 0: const xData = Utils.numbers({ count: 5, decimals: 0, min: -60, max: 20, }); const yData = Utils.numbers({ count: 5, decimals: 0, min: 0, max: 40, }); series.data = sharedVar.data = xData.map(function(x, idx) { return [x, yData[idx]]; }); break; } }); chart.setOption(options); }"
    }
  ],
  "sharedVar": {
    "data": [
      [
        40,
        -10
      ],
      [
        -30,
        -5
      ],
      [
        -76.5,
        20
      ],
      [
        -63.5,
        40
      ],
      [
        -22.1,
        50
      ]
    ],
    "symbolSize": 20,
    "graphic": "function() { const myChart = sharedVar.myChart; const data = sharedVar.data; myChart.setOption({ graphic: data.map(function (item, dataIndex) { return { type: 'circle', position: myChart.convertToPixel('grid', item), shape: { cx: 0, cy: 0, r: sharedVar.symbolSize / 2 }, invisible: true, draggable: true, ondrag: function (dx, dy) { sharedVar.onPointDragging(dataIndex, [this.x, this.y]); }, onmousemove: function () { sharedVar.showTooltip(dataIndex); }, onmouseout: function () { sharedVar.hideTooltip(dataIndex); }, z: 100 }; }) }); }",
    "dataZoom": "function() { sharedVar.updatePosition(); }",
    "updatePosition": "function updatePosition() { const myChart = sharedVar.myChart; const data = sharedVar.data; myChart.setOption({ graphic: data.map(function (item, dataIndex) { return { position: myChart.convertToPixel('grid', item) }; }) }); }",
    "onPointDragging": "function onPointDragging(dataIndex, pos) { const myChart = sharedVar.myChart; const data = sharedVar.data; data[dataIndex] = myChart.convertFromPixel('grid', pos); /**  Update data */ myChart.setOption({ series: [ { id: 'a', data: data } ] }); }",
    "hideTooltip": "function hideTooltip(dataIndex) { const myChart = sharedVar.myChart; myChart.dispatchAction({ type: 'hideTip' }); }",
    "showTooltip": "function showTooltip(dataIndex) { const myChart = sharedVar.myChart; myChart.dispatchAction({ type: 'showTip', seriesIndex: 0, dataIndex: dataIndex }); }"
  }
}