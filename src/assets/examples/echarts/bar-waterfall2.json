{
  "title": {
    "text": "Accumulated Waterfall Chart"
  },
  "tooltip": {
    "trigger": "axis",
    "axisPointer": {
      "type": "shadow"
    },
    "formatter": "function (params) { let tar; if (params[1].value !== '-') { tar = params[1]; } else { tar = params[0]; } return tar.name + '\\n' + tar.seriesName + ' : ' + tar.value; }"
  },
  "legend": {
    "data": [
      "Expenses",
      "Income"
    ]
  },
  "grid": {
    "left": "3%",
    "right": "4%",
    "bottom": "3%",
    "containLabel": true
  },
  "xAxis": {
    "type": "category",
    "data": [
      "Nov 1",
      "Nov 2",
      "Nov 3",
      "Nov 4",
      "Nov 5",
      "Nov 6",
      "Nov 7",
      "Nov 8",
      "Nov 9",
      "Nov 10",
      "Nov 11"
    ]
  },
  "yAxis": {
    "type": "value"
  },
  "series": [
    {
      "name": "Placeholder",
      "type": "bar",
      "stack": "Total",
      "itemStyle": {
        "borderColor": "transparent",
        "color": "transparent"
      },
      "emphasis": {
        "itemStyle": {
          "borderColor": "transparent",
          "color": "transparent"
        }
      },
      "data": [
        0,
        900,
        1245,
        1530,
        1376,
        1376,
        1511,
        1689,
        1856,
        1495,
        1292
      ]
    },
    {
      "name": "Income",
      "type": "bar",
      "stack": "Total",
      "label": {
        "show": true,
        "position": "top"
      },
      "data": [
        900,
        345,
        393,
        "-",
        "-",
        135,
        178,
        286,
        "-",
        "-",
        "-"
      ]
    },
    {
      "name": "Expenses",
      "type": "bar",
      "stack": "Total",
      "label": {
        "show": true,
        "position": "bottom"
      },
      "data": [
        "-",
        "-",
        "-",
        108,
        154,
        "-",
        "-",
        "-",
        119,
        361,
        203
      ]
    }
  ],
  "actions": [
    {
      "name": "Randomize",
      "handler": "(chart) => { const options = chart.getOption(); options.series.forEach((series, idx) => { series.data = Utils.numbers({ count: series.data.length, decimals: 0, min: 100, max: 1700, }); }); chart.setOption(options); }"
    },
    {
      "name": "Add Data",
      "handler": "(chart) => { const options = chart.getOption(); if (options.series.length > 0) { options.xAxis.forEach((xAxis) => { xAxis.data.push(Utils.dayofweek({ count: xAxis.data.length + 1 }).pop()); }); options.series.forEach((series) => { const value = Math.round(Utils.rand(500, 1500)); series.data.push(value); }); chart.setOption(options); } }"
    },
    {
      "name": "Remove Data",
      "handler": "(chart) => { const options = chart.getOption(); if (options.series.length > 0) { options.xAxis.forEach((xAxis) => { xAxis.data.splice(-1, 1); }); options.series.forEach((series) => { series.data.pop(); }); chart.setOption(options); } }"
    }
  ],
  "sharedVar": {}
}